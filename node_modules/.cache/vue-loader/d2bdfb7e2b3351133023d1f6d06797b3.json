{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/src/views/dashboard/Index.vue?vue&type=template&id=f042b266&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/src/views/dashboard/Index.vue","mtime":1640685826717},{"path":"/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/node_modules/cache-loader/dist/cjs.js","mtime":1634614764027},{"path":"/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634873350795},{"path":"/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/node_modules/cache-loader/dist/cjs.js","mtime":1634614764027},{"path":"/Applications/XAMPP/xamppfiles/htdocs/ccn-wallet-browser/node_modules/vue-loader/lib/index.js","mtime":1634873350795}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}